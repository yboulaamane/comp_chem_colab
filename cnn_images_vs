{"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fB7o09WC890E","executionInfo":{"status":"ok","timestamp":1659277326605,"user_tz":-180,"elapsed":21401,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"d66b9d68-2f23-413d-a60e-1451b55627ee"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["!pip install rdkit-pypi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N3P93t0oGidR","executionInfo":{"status":"ok","timestamp":1659277339817,"user_tz":-180,"elapsed":13217,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"eed589bb-f9ee-4c70-9a39-07583600d044"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting rdkit-pypi\n","  Downloading rdkit_pypi-2022.3.4-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (22.7 MB)\n","\u001b[K     |████████████████████████████████| 22.7 MB 55.0 MB/s \n","\u001b[?25hRequirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from rdkit-pypi) (7.1.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from rdkit-pypi) (1.21.6)\n","Installing collected packages: rdkit-pypi\n","Successfully installed rdkit-pypi-2022.3.4\n"]}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","import numpy as np\n","import rdkit.Chem as Chem\n","from rdkit.Chem import Draw\n","from rdkit.Chem.Draw import DrawingOptions\n","import tensorflow as tf2\n","import PIL \n","import PIL.Image"],"metadata":{"id":"SeqiaoeCGhPI","executionInfo":{"status":"ok","timestamp":1659277344318,"user_tz":-180,"elapsed":4507,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["#MAO-B\n","x=pd.read_csv(\"/content/drive/MyDrive/erk2/maob_binary_labelled.smi\", sep='\\t', header=None)"],"metadata":{"id":"9SFLT7bL8OhR","executionInfo":{"status":"ok","timestamp":1659277344732,"user_tz":-180,"elapsed":419,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["x.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"S8N8l-8i8Ojf","executionInfo":{"status":"ok","timestamp":1659277344733,"user_tz":-180,"elapsed":14,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"7c765e28-b880-42dc-ed23-550a83c5a601"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                         0  1\n","0  Cc1cc2c(nn1)-c1cc(OCCCC(F)(F)F)ccc1C2=O  1\n","1       Cc1ccc2oc(=O)c(-c3cccc(Br)c3)cc2c1  1\n","2   O=C(Nc1ccc(Cl)c(Cl)c1)c1ccc2[nH]ccc2c1  1\n","3          Cc1ccc(-c2cc3cc(C)ccc3oc2=O)cc1  1\n","4            O=C1CCc2cc(OCCCC(F)(F)F)ccc21  1"],"text/html":["\n","  <div id=\"df-c3df4dcc-0aec-4420-8f70-1595bf7feec3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Cc1cc2c(nn1)-c1cc(OCCCC(F)(F)F)ccc1C2=O</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Cc1ccc2oc(=O)c(-c3cccc(Br)c3)cc2c1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>O=C(Nc1ccc(Cl)c(Cl)c1)c1ccc2[nH]ccc2c1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Cc1ccc(-c2cc3cc(C)ccc3oc2=O)cc1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>O=C1CCc2cc(OCCCC(F)(F)F)ccc21</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3df4dcc-0aec-4420-8f70-1595bf7feec3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c3df4dcc-0aec-4420-8f70-1595bf7feec3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c3df4dcc-0aec-4420-8f70-1595bf7feec3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["x.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"qMo6Qvyk8Olj","executionInfo":{"status":"ok","timestamp":1659277344734,"user_tz":-180,"elapsed":12,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"449285a8-61f4-434b-9860-5b875b9f6f6e"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                0  1\n","2360  C/C(=N\\Nc1nc2ccccc2nc1Cc1ccccc1)c1ccc(O)cc1  0\n","2361       COc1cc(/C=C2\\COc3ccccc3C2=O)cc(OC)c1OC  0\n","2362                COc1ccc(Cc2coc3ccccc3c2=O)cc1  0\n","2363                    O=C1c2ccccc2OCC1Cc1ccccc1  0\n","2364        CN(Cc1ccccc1)c1ccc2nc(-c3ccccc3)oc2n1  0"],"text/html":["\n","  <div id=\"df-acf84123-21c6-4884-b70c-f71ab0f0a9cf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2360</th>\n","      <td>C/C(=N\\Nc1nc2ccccc2nc1Cc1ccccc1)c1ccc(O)cc1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2361</th>\n","      <td>COc1cc(/C=C2\\COc3ccccc3C2=O)cc(OC)c1OC</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2362</th>\n","      <td>COc1ccc(Cc2coc3ccccc3c2=O)cc1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2363</th>\n","      <td>O=C1c2ccccc2OCC1Cc1ccccc1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2364</th>\n","      <td>CN(Cc1ccccc1)c1ccc2nc(-c3ccccc3)oc2n1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-acf84123-21c6-4884-b70c-f71ab0f0a9cf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-acf84123-21c6-4884-b70c-f71ab0f0a9cf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-acf84123-21c6-4884-b70c-f71ab0f0a9cf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["t1=Chem.SmilesMolSupplier(\"/content/drive/MyDrive/erk2/maob_binary_labelled.smi\", delimiter=\"\\t\", titleLine=False)\n","ids=[mol.GetProp(\"_Name\") for mol in t1]"],"metadata":{"id":"yXOK3XAX8Onx","executionInfo":{"status":"ok","timestamp":1659277345639,"user_tz":-180,"elapsed":914,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["path=\"./images/\"\n","for i,mol in enumerate (t1):\n","  Draw.MolToFile(mol, path+str(i)+\".png\", size=(200, 200))"],"metadata":{"id":"-JL5McBVTCU7","executionInfo":{"status":"ok","timestamp":1659277383022,"user_tz":-180,"elapsed":16590,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["DrawingOptions.dotsPerAngstrom=100\n","DrawingOptions.bondLineWidth=1.0"],"metadata":{"id":"8v0I5lYweLta","executionInfo":{"status":"ok","timestamp":1659277383023,"user_tz":-180,"elapsed":14,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["PIL.Image.open(path+\"1.png\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":217},"id":"sIEylrsreMTB","executionInfo":{"status":"ok","timestamp":1659277383024,"user_tz":-180,"elapsed":14,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"0a9316c6-08c1-4ac1-8ef0-7755438a47fd"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<PIL.PngImagePlugin.PngImageFile image mode=RGB size=200x200 at 0x7F829F619ED0>"],"image/png":"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\n"},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["from keras.preprocessing.image import load_img\n","from keras.preprocessing.image import img_to_array"],"metadata":{"id":"KLzUkuPReMY-","executionInfo":{"status":"ok","timestamp":1659277383024,"user_tz":-180,"elapsed":10,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["all_images=[]\n","for file in os.listdir(path):\n","  file_input=os.path.join(path, file)\n","  img=load_img(file_input, color_mode=\"rgb\")\n","  all_images.append(img_to_array(img)/255.0)"],"metadata":{"id":"AL8MONUjeMok","executionInfo":{"status":"ok","timestamp":1659277388963,"user_tz":-180,"elapsed":5949,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["input_arr=np.asarray(all_images)\n","labels=np.asarray(ids, dtype=np.float32).reshape(-1,1)"],"metadata":{"id":"ilsXIztYgcgI","executionInfo":{"status":"ok","timestamp":1659277389676,"user_tz":-180,"elapsed":718,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["input_arr"],"metadata":{"id":"08LqAZc3r2gi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659277389677,"user_tz":-180,"elapsed":20,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"91ccf000-b7b2-45d6-a301-7055290d5a14"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        ...,\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]]],\n","\n","\n","       [[[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        ...,\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]]],\n","\n","\n","       [[[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        ...,\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]]],\n","\n","\n","       ...,\n","\n","\n","       [[[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        ...,\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]]],\n","\n","\n","       [[[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        ...,\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]]],\n","\n","\n","       [[[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        ...,\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]],\n","\n","        [[1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         ...,\n","         [1., 1., 1.],\n","         [1., 1., 1.],\n","         [1., 1., 1.]]]], dtype=float32)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MhHPxIrF4np3","executionInfo":{"status":"ok","timestamp":1659277389678,"user_tz":-180,"elapsed":18,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"836ca7f7-6778-41cb-dfb6-4f3a20f07e72"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1.],\n","       [1.],\n","       [1.],\n","       ...,\n","       [0.],\n","       [0.],\n","       [0.]], dtype=float32)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["labels.dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r0fDuszTZ7Bh","executionInfo":{"status":"ok","timestamp":1659277389678,"user_tz":-180,"elapsed":8,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"17fadab6-1bdb-49f9-d2eb-1ead513cb89b"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dtype('float32')"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test=train_test_split(input_arr, labels, test_size=0.3, shuffle=True, random_state=42, stratify=labels)"],"metadata":{"id":"V6gtLYrr4nnf","executionInfo":{"status":"ok","timestamp":1659277390369,"user_tz":-180,"elapsed":697,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["X_test, X_valid, y_test, y_valid=train_test_split(input_arr, labels, test_size=0.1, shuffle=True, random_state=42, stratify=labels)"],"metadata":{"id":"QHriGIF_4nla","executionInfo":{"status":"ok","timestamp":1659277391099,"user_tz":-180,"elapsed":735,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["X_valid.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mttDHxHl4njc","executionInfo":{"status":"ok","timestamp":1659277391101,"user_tz":-180,"elapsed":8,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"2062bc85-6802-4103-9d23-ca1e0e93b742"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(237, 200, 200, 3)"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["!pip install keras-tuner --upgrade"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DlKgi0XVpMAL","executionInfo":{"status":"ok","timestamp":1659277468469,"user_tz":-180,"elapsed":6135,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"94cea646-db85-45e8-975f-0195445cf759"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting keras-tuner\n","  Downloading keras_tuner-1.1.3-py3-none-any.whl (135 kB)\n","\u001b[K     |████████████████████████████████| 135 kB 7.0 MB/s \n","\u001b[?25hRequirement already satisfied: ipython in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (5.5.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (2.23.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (21.3)\n","Requirement already satisfied: tensorboard in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (2.8.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (1.21.6)\n","Collecting kt-legacy\n","  Downloading kt_legacy-1.0.4-py3-none-any.whl (9.6 kB)\n","Requirement already satisfied: simplegeneric>0.8 in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (0.8.1)\n","Requirement already satisfied: prompt-toolkit<2.0.0,>=1.0.4 in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (1.0.18)\n","Requirement already satisfied: pexpect in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (4.8.0)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (2.6.1)\n","Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (5.1.1)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (57.4.0)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (4.4.2)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from ipython->keras-tuner) (0.7.5)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython->keras-tuner) (1.15.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython->keras-tuner) (0.2.5)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->keras-tuner) (3.0.9)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.7/dist-packages (from pexpect->ipython->keras-tuner) (0.7.0)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (2022.6.15)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (2.10)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (1.0.1)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (0.37.1)\n","Requirement already satisfied: absl-py>=0.4 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (1.2.0)\n","Requirement already satisfied: grpcio>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (1.47.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (3.4.1)\n","Requirement already satisfied: protobuf>=3.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (3.17.3)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (1.8.1)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (1.35.0)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (0.4.6)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->keras-tuner) (0.6.1)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->keras-tuner) (4.9)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->keras-tuner) (0.2.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->keras-tuner) (4.2.4)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard->keras-tuner) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard->keras-tuner) (4.12.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard->keras-tuner) (4.1.1)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard->keras-tuner) (3.8.1)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard->keras-tuner) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard->keras-tuner) (3.2.0)\n","Installing collected packages: kt-legacy, keras-tuner\n","Successfully installed keras-tuner-1.1.3 kt-legacy-1.0.4\n"]}]},{"cell_type":"code","source":["#import pandas\n","import pandas as pd\n","#importing numpy\n","import numpy as np\n","#importing tensorflow\n","import tensorflow as tf\n","#importing keras from tensorflow\n","from tensorflow import keras\n","# importing Sequential from keras\n","from tensorflow.keras.models import Sequential\n","#importing Dense and Conv2D layers from keras\n","from tensorflow.keras.layers import Dense,Conv2D"],"metadata":{"id":"v_hLRNCwpDYC","executionInfo":{"status":"ok","timestamp":1659277472476,"user_tz":-180,"elapsed":3,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["from keras import layers\n","from keras import models\n","model = models.Sequential()\n","model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(200, 200, 3)))\n","model.add(layers.MaxPooling2D((2,2)))\n","model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2,2)))\n","model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2,2)))\n","model.add(layers.Flatten())\n","model.add(layers.Dense(64, activation='relu'))\n","model.add(layers.Dense(1, activation='sigmoid'))\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nfq9DhS74nha","executionInfo":{"status":"ok","timestamp":1659277492112,"user_tz":-180,"elapsed":1188,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"81d9ede3-28a8-4fd2-be79-0da039211a74"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 198, 198, 32)      896       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 99, 99, 32)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 97, 97, 64)        18496     \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 48, 48, 64)       0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 46, 46, 128)       73856     \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 23, 23, 128)      0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 67712)             0         \n","                                                                 \n"," dense (Dense)               (None, 64)                4333632   \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 65        \n","                                                                 \n","=================================================================\n","Total params: 4,426,945\n","Trainable params: 4,426,945\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])"],"metadata":{"id":"Uh3ToDl84nfm","executionInfo":{"status":"ok","timestamp":1659277497227,"user_tz":-180,"elapsed":254,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["history=model.fit(X_train, y_train, epochs=5, batch_size=32, validation_data=(X_valid, y_valid))"],"metadata":{"id":"7Bxq2VZq4ndi","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"error","timestamp":1659278036142,"user_tz":-180,"elapsed":400413,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"3ea24724-ef89-490e-f8bd-436608d70487"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","52/52 [==============================] - 124s 2s/step - loss: 0.7129 - accuracy: 0.5644 - val_loss: 0.6850 - val_accuracy: 0.5654\n","Epoch 2/5\n","52/52 [==============================] - 120s 2s/step - loss: 0.6860 - accuracy: 0.5668 - val_loss: 0.6855 - val_accuracy: 0.5654\n","Epoch 3/5\n","52/52 [==============================] - 119s 2s/step - loss: 0.6862 - accuracy: 0.5668 - val_loss: 0.6847 - val_accuracy: 0.5654\n","Epoch 4/5\n","14/52 [=======>......................] - ETA: 1:32 - loss: 0.6865 - accuracy: 0.5513"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-b9feb5d8692f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhistory\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_valid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_valid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 _r=1):\n\u001b[1;32m   1383\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1384\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1386\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    945\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    946\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 947\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    948\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2955\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2956\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2957\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2959\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1852\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1853\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1854\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1855\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1856\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    502\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    505\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])"],"metadata":{"id":"bDVci9TT4nbV","executionInfo":{"status":"ok","timestamp":1659278040281,"user_tz":-180,"elapsed":290,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["history=model.fit(X_train, y_train, epochs=100, batch_size=1024, validation_data=(X_valid, y_valid))"],"metadata":{"id":"m7jTaTQt5Qlm","colab":{"base_uri":"https://localhost:8080/","height":165},"executionInfo":{"status":"error","timestamp":1659278071592,"user_tz":-180,"elapsed":328,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"f83d1e17-71a9-417d-b675-eb81fb5a95ac"},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-867d676c2745>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhistory\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1024\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_valid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_valid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}]},{"cell_type":"code","source":["#Hyperparameter optimization\n","from keras.callbacks import Callback, EarlyStopping\n","from keras.callbacks import ReduceLROnPlateau\n","earlyStopping=EarlyStopping(monitor=\"accuracy\", patience=5, mode=\"auto\")\n","reduce_lr_loss=ReduceLROnPlateau(monitor=\"accuracy\", patience=10, factor=0.1, min_delta=1e-4, mode=\"min\")"],"metadata":{"id":"DO6s559L5Qi-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history=model.fit(X_train, y_train, epochs=50, batch_size=8, validation_data=(X_valid, y_valid), callbacks=[earlyStopping])"],"metadata":{"id":"TM2185yf5Qeh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659264270323,"user_tz":-180,"elapsed":5541168,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"674be78f-32ab-4399-9e62-d0e6c6ef4098"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","207/207 [==============================] - 119s 574ms/step - loss: 0.1698 - accuracy: 0.9293 - val_loss: 1.8889 - val_accuracy: 0.4810\n","Epoch 2/50\n","207/207 [==============================] - 118s 571ms/step - loss: 0.1417 - accuracy: 0.9396 - val_loss: 2.2098 - val_accuracy: 0.4937\n","Epoch 3/50\n","207/207 [==============================] - 118s 571ms/step - loss: 0.1331 - accuracy: 0.9384 - val_loss: 2.3478 - val_accuracy: 0.5063\n","Epoch 4/50\n","207/207 [==============================] - 118s 570ms/step - loss: 0.1323 - accuracy: 0.9426 - val_loss: 2.0716 - val_accuracy: 0.4937\n","Epoch 5/50\n","207/207 [==============================] - 119s 573ms/step - loss: 0.1208 - accuracy: 0.9426 - val_loss: 2.2375 - val_accuracy: 0.4641\n","Epoch 6/50\n","207/207 [==============================] - 118s 570ms/step - loss: 0.1108 - accuracy: 0.9529 - val_loss: 2.2684 - val_accuracy: 0.4979\n","Epoch 7/50\n","207/207 [==============================] - 118s 570ms/step - loss: 0.0987 - accuracy: 0.9529 - val_loss: 2.2036 - val_accuracy: 0.4937\n","Epoch 8/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0876 - accuracy: 0.9583 - val_loss: 2.2907 - val_accuracy: 0.4684\n","Epoch 9/50\n","207/207 [==============================] - 119s 573ms/step - loss: 0.0859 - accuracy: 0.9613 - val_loss: 2.5138 - val_accuracy: 0.5148\n","Epoch 10/50\n","207/207 [==============================] - 118s 568ms/step - loss: 0.0779 - accuracy: 0.9637 - val_loss: 2.3253 - val_accuracy: 0.5021\n","Epoch 11/50\n","207/207 [==============================] - 118s 572ms/step - loss: 0.0655 - accuracy: 0.9662 - val_loss: 2.4225 - val_accuracy: 0.4726\n","Epoch 12/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0676 - accuracy: 0.9644 - val_loss: 3.0237 - val_accuracy: 0.5105\n","Epoch 13/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0635 - accuracy: 0.9698 - val_loss: 2.8663 - val_accuracy: 0.5021\n","Epoch 14/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0707 - accuracy: 0.9704 - val_loss: 3.1022 - val_accuracy: 0.4937\n","Epoch 15/50\n","207/207 [==============================] - 117s 567ms/step - loss: 0.0835 - accuracy: 0.9637 - val_loss: 2.8613 - val_accuracy: 0.4684\n","Epoch 16/50\n","207/207 [==============================] - 118s 570ms/step - loss: 0.0768 - accuracy: 0.9686 - val_loss: 2.9653 - val_accuracy: 0.4895\n","Epoch 17/50\n","207/207 [==============================] - 118s 570ms/step - loss: 0.0577 - accuracy: 0.9710 - val_loss: 2.8821 - val_accuracy: 0.5021\n","Epoch 18/50\n","207/207 [==============================] - 118s 572ms/step - loss: 0.0460 - accuracy: 0.9807 - val_loss: 2.9408 - val_accuracy: 0.4557\n","Epoch 19/50\n","207/207 [==============================] - 119s 573ms/step - loss: 0.0403 - accuracy: 0.9795 - val_loss: 3.0187 - val_accuracy: 0.4726\n","Epoch 20/50\n","207/207 [==============================] - 119s 573ms/step - loss: 0.0471 - accuracy: 0.9782 - val_loss: 2.6931 - val_accuracy: 0.4937\n","Epoch 21/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0366 - accuracy: 0.9843 - val_loss: 3.5552 - val_accuracy: 0.4768\n","Epoch 22/50\n","207/207 [==============================] - 118s 572ms/step - loss: 0.0416 - accuracy: 0.9861 - val_loss: 3.0459 - val_accuracy: 0.4937\n","Epoch 23/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0270 - accuracy: 0.9861 - val_loss: 4.1388 - val_accuracy: 0.4852\n","Epoch 24/50\n","207/207 [==============================] - 118s 568ms/step - loss: 0.0271 - accuracy: 0.9867 - val_loss: 3.5023 - val_accuracy: 0.4852\n","Epoch 25/50\n","207/207 [==============================] - 118s 570ms/step - loss: 0.0311 - accuracy: 0.9843 - val_loss: 3.6827 - val_accuracy: 0.4937\n","Epoch 26/50\n","207/207 [==============================] - 117s 567ms/step - loss: 0.0323 - accuracy: 0.9843 - val_loss: 4.0181 - val_accuracy: 0.4768\n","Epoch 27/50\n","207/207 [==============================] - 118s 568ms/step - loss: 0.0408 - accuracy: 0.9867 - val_loss: 3.8737 - val_accuracy: 0.4852\n","Epoch 28/50\n","207/207 [==============================] - 117s 567ms/step - loss: 0.0275 - accuracy: 0.9885 - val_loss: 3.9280 - val_accuracy: 0.4599\n","Epoch 29/50\n","207/207 [==============================] - 117s 566ms/step - loss: 0.0236 - accuracy: 0.9903 - val_loss: 4.4268 - val_accuracy: 0.4937\n","Epoch 30/50\n","207/207 [==============================] - 117s 567ms/step - loss: 0.0294 - accuracy: 0.9855 - val_loss: 3.8407 - val_accuracy: 0.4937\n","Epoch 31/50\n","207/207 [==============================] - 117s 565ms/step - loss: 0.0244 - accuracy: 0.9891 - val_loss: 3.8651 - val_accuracy: 0.4726\n","Epoch 32/50\n","207/207 [==============================] - 117s 566ms/step - loss: 0.0345 - accuracy: 0.9867 - val_loss: 3.4133 - val_accuracy: 0.4852\n","Epoch 33/50\n","207/207 [==============================] - 117s 567ms/step - loss: 0.0584 - accuracy: 0.9837 - val_loss: 3.5890 - val_accuracy: 0.4388\n","Epoch 34/50\n","207/207 [==============================] - 117s 568ms/step - loss: 0.0269 - accuracy: 0.9921 - val_loss: 3.8039 - val_accuracy: 0.4599\n","Epoch 35/50\n","207/207 [==============================] - 118s 572ms/step - loss: 0.0191 - accuracy: 0.9940 - val_loss: 4.1977 - val_accuracy: 0.4852\n","Epoch 36/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0136 - accuracy: 0.9940 - val_loss: 4.3748 - val_accuracy: 0.4852\n","Epoch 37/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0136 - accuracy: 0.9946 - val_loss: 4.5995 - val_accuracy: 0.4557\n","Epoch 38/50\n","207/207 [==============================] - 118s 571ms/step - loss: 0.0256 - accuracy: 0.9940 - val_loss: 3.9221 - val_accuracy: 0.4810\n","Epoch 39/50\n","207/207 [==============================] - 118s 571ms/step - loss: 0.0120 - accuracy: 0.9940 - val_loss: 4.4528 - val_accuracy: 0.4515\n","Epoch 40/50\n","207/207 [==============================] - 118s 570ms/step - loss: 0.0106 - accuracy: 0.9946 - val_loss: 4.9148 - val_accuracy: 0.4726\n","Epoch 41/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0089 - accuracy: 0.9946 - val_loss: 5.6459 - val_accuracy: 0.4810\n","Epoch 42/50\n","207/207 [==============================] - 118s 570ms/step - loss: 0.0097 - accuracy: 0.9952 - val_loss: 5.1899 - val_accuracy: 0.4684\n","Epoch 43/50\n","207/207 [==============================] - 118s 570ms/step - loss: 0.0164 - accuracy: 0.9940 - val_loss: 4.9593 - val_accuracy: 0.4810\n","Epoch 44/50\n","207/207 [==============================] - 118s 571ms/step - loss: 0.0376 - accuracy: 0.9903 - val_loss: 4.6690 - val_accuracy: 0.4726\n","Epoch 45/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0501 - accuracy: 0.9873 - val_loss: 4.0728 - val_accuracy: 0.4768\n","Epoch 46/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0595 - accuracy: 0.9789 - val_loss: 3.5271 - val_accuracy: 0.4895\n","Epoch 47/50\n","207/207 [==============================] - 118s 569ms/step - loss: 0.0720 - accuracy: 0.9807 - val_loss: 3.1966 - val_accuracy: 0.4810\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.callbacks import CSVLogger\n","csv_logger=CSVLogger('trial.csv', append=True, separator=',')"],"metadata":{"id":"PebgPNp85QcZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install pycm"],"metadata":{"id":"dKzf3v3x8OnF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659264273526,"user_tz":-180,"elapsed":3208,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"e89497b4-a699-4385-bdc6-ccb8cf845b8f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pycm in /usr/local/lib/python3.7/dist-packages (3.5)\n","Requirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from pycm) (1.21.6)\n","Requirement already satisfied: art>=1.8 in /usr/local/lib/python3.7/dist-packages (from pycm) (5.7)\n"]}]},{"cell_type":"code","source":["from pycm import *\n","predicted=np.argmax(model.predict(X_test), axis=-1)\n","cm=ConfusionMatrix(actual_vector=y_test.reshape(-1), predict_vector=predicted.reshape(-1))\n","print(cm)"],"metadata":{"id":"nNuIUc9b5Qah","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659265156967,"user_tz":-180,"elapsed":49741,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"5749cbae-fe39-4440-afba-473471ba9afb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Predict    0          0.0        1.0        \n","Actual\n","0          0          0          0          \n","\n","0.0        1207       0          0          \n","\n","1.0        921        0          0          \n","\n","\n","\n","\n","\n","Overall Statistics : \n","\n","95% CI                                                            (0.0,0.0)\n","ACC Macro                                                         0.33333\n","ARI                                                               0.0\n","AUNP                                                              None\n","AUNU                                                              None\n","Bangdiwala B                                                      None\n","Bennett S                                                         -0.5\n","CBA                                                               0.0\n","CSI                                                               None\n","Chi-Squared                                                       None\n","Chi-Squared DF                                                    4\n","Conditional Entropy                                               -0.0\n","Cramer V                                                          None\n","Cross Entropy                                                     0\n","F1 Macro                                                          0.0\n","F1 Micro                                                          0.0\n","FNR Macro                                                         None\n","FNR Micro                                                         1.0\n","FPR Macro                                                         0.33333\n","FPR Micro                                                         0.5\n","Gwet AC1                                                          -0.45216\n","Hamming Loss                                                      1.0\n","Joint Entropy                                                     0.98693\n","KL Divergence                                                     None\n","Kappa                                                             0.0\n","Kappa 95% CI                                                      (0.0,0.0)\n","Kappa No Prevalence                                               -1.0\n","Kappa Standard Error                                              0.0\n","Kappa Unbiased                                                    -0.6058\n","Krippendorff Alpha                                                -0.60542\n","Lambda A                                                          0.0\n","Lambda B                                                          None\n","Mutual Information                                                0.0\n","NIR                                                               0.5672\n","Overall ACC                                                       0.0\n","Overall CEN                                                       0.24673\n","Overall J                                                         (0.0,0.0)\n","Overall MCC                                                       None\n","Overall MCEN                                                      0.24673\n","Overall RACC                                                      0.0\n","Overall RACCU                                                     0.37726\n","P-Value                                                           1\n","PPV Macro                                                         None\n","PPV Micro                                                         0.0\n","Pearson C                                                         None\n","Phi-Squared                                                       None\n","RCI                                                               0.0\n","RR                                                                709.33333\n","Reference Entropy                                                 0.98693\n","Response Entropy                                                  -0.0\n","SOA1(Landis & Koch)                                               Slight\n","SOA2(Fleiss)                                                      Poor\n","SOA3(Altman)                                                      Poor\n","SOA4(Cicchetti)                                                   Poor\n","SOA5(Cramer)                                                      None\n","SOA6(Matthews)                                                    None\n","Scott PI                                                          -0.6058\n","Standard Error                                                    0.0\n","TNR Macro                                                         0.66667\n","TNR Micro                                                         0.5\n","TPR Macro                                                         None\n","TPR Micro                                                         0.0\n","Zero-one Loss                                                     2128\n","\n","Class Statistics :\n","\n","Classes                                                           0             0.0           1.0           \n","ACC(Accuracy)                                                     0.0           0.4328        0.5672        \n","AGF(Adjusted F-score)                                             0.0           0.0           0.0           \n","AGM(Adjusted geometric mean)                                      None          0             0             \n","AM(Difference between automatic and manual classification)        2128          -1207         -921          \n","AUC(Area under the ROC curve)                                     None          0.5           0.5           \n","AUCI(AUC value interpretation)                                    None          Poor          Poor          \n","AUPR(Area under the PR curve)                                     None          None          None          \n","BCD(Bray-Curtis dissimilarity)                                    0.5           0.2836        0.2164        \n","BM(Informedness or bookmaker informedness)                        None          0.0           0.0           \n","CEN(Confusion entropy)                                            0.49347       0.0           0.0           \n","DOR(Diagnostic odds ratio)                                        None          None          None          \n","DP(Discriminant power)                                            None          None          None          \n","DPI(Discriminant power interpretation)                            None          None          None          \n","ERR(Error rate)                                                   1.0           0.5672        0.4328        \n","F0.5(F0.5 score)                                                  0.0           0.0           0.0           \n","F1(F1 score - harmonic mean of precision and sensitivity)         0.0           0.0           0.0           \n","F2(F2 score)                                                      0.0           0.0           0.0           \n","FDR(False discovery rate)                                         1.0           None          None          \n","FN(False negative/miss/type 2 error)                              0             1207          921           \n","FNR(Miss rate or false negative rate)                             None          1.0           1.0           \n","FOR(False omission rate)                                          None          0.5672        0.4328        \n","FP(False positive/type 1 error/false alarm)                       2128          0             0             \n","FPR(Fall-out or false positive rate)                              1.0           0.0           0.0           \n","G(G-measure geometric mean of precision and sensitivity)          None          None          None          \n","GI(Gini index)                                                    None          0.0           0.0           \n","GM(G-mean geometric mean of specificity and sensitivity)          None          0.0           0.0           \n","IBA(Index of balanced accuracy)                                   None          0.0           0.0           \n","ICSI(Individual classification success index)                     None          None          None          \n","IS(Information score)                                             None          None          None          \n","J(Jaccard index)                                                  0.0           0.0           0.0           \n","LS(Lift score)                                                    None          None          None          \n","MCC(Matthews correlation coefficient)                             None          None          None          \n","MCCI(Matthews correlation coefficient interpretation)             None          None          None          \n","MCEN(Modified confusion entropy)                                  0.49347       0.0           0.0           \n","MK(Markedness)                                                    None          None          None          \n","N(Condition negative)                                             2128          921           1207          \n","NLR(Negative likelihood ratio)                                    None          1.0           1.0           \n","NLRI(Negative likelihood ratio interpretation)                    None          Negligible    Negligible    \n","NPV(Negative predictive value)                                    None          0.4328        0.5672        \n","OC(Overlap coefficient)                                           None          None          None          \n","OOC(Otsuka-Ochiai coefficient)                                    None          None          None          \n","OP(Optimized precision)                                           None          -0.5672       -0.4328       \n","P(Condition positive or support)                                  0             1207          921           \n","PLR(Positive likelihood ratio)                                    None          None          None          \n","PLRI(Positive likelihood ratio interpretation)                    None          None          None          \n","POP(Population)                                                   2128          2128          2128          \n","PPV(Precision or positive predictive value)                       0.0           None          None          \n","PRE(Prevalence)                                                   0.0           0.5672        0.4328        \n","Q(Yule Q - coefficient of colligation)                            None          None          None          \n","QI(Yule Q interpretation)                                         None          None          None          \n","RACC(Random accuracy)                                             0.0           0.0           0.0           \n","RACCU(Random accuracy unbiased)                                   0.25          0.08043       0.04683       \n","TN(True negative/correct rejection)                               0             921           1207          \n","TNR(Specificity or true negative rate)                            0.0           1.0           1.0           \n","TON(Test outcome negative)                                        0             2128          2128          \n","TOP(Test outcome positive)                                        2128          0             0             \n","TP(True positive/hit)                                             0             0             0             \n","TPR(Sensitivity, recall, hit rate, or true positive rate)         None          0.0           0.0           \n","Y(Youden index)                                                   None          0.0           0.0           \n","dInd(Distance index)                                              None          1.0           1.0           \n","sInd(Similarity index)                                            None          0.29289       0.29289       \n","\n"]}]},{"cell_type":"code","source":["model.save('trial_model')"],"metadata":{"id":"GNuIQ9mu5QYD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659264357233,"user_tz":-180,"elapsed":1419,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"1dc56710-c1d4-4926-8b12-c3dfad8a5bb1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["INFO:tensorflow:Assets written to: trial_model/assets\n"]}]},{"cell_type":"code","source":["model = models.Sequential()\n","model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(200, 200, 3)))\n","model.add(layers.MaxPooling2D((2,2)))\n","model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2,2)))\n","model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2,2)))\n","model.add(layers.Flatten())\n","model.add(layers.Dense(512, activation='relu'))\n","model.add(layers.Dense(1, activation='sigmoid'))"],"metadata":{"id":"aUk5v7hmR9XL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import skopt\n","from skopt import gbrt_minimize, gp_minimize\n","from skopt.utils import use_named_args\n","from skopt.space import Real, Categorical, Integer"],"metadata":{"id":"Oz2kBFVkR9U6","colab":{"base_uri":"https://localhost:8080/","height":356},"executionInfo":{"status":"error","timestamp":1659264358968,"user_tz":-180,"elapsed":1211,"user":{"displayName":"Yassir B.","userId":"16892896183514751590"}},"outputId":"73efd86f-780f-4607-d69b-dbea341516a7"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-0867cc894061>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mskopt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mskopt\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mgbrt_minimize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgp_minimize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mskopt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0muse_named_args\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mskopt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspace\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mReal\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCategorical\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mInteger\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'skopt'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["dim_epoch_size=Categorical(categories[25,50], name='dim_epoch_size')\n","dim_batch_size=Categorical(categories[16, 32], name='dim_batch_size')\n","dim_dense_size=Categorical(categories[64], name='dim_dense_size')\n","\n","dimensions=[dim_epoch_size, dim_batch_size, dim_dense_size]\n","\n","default_parameters=[10,8,32]"],"metadata":{"id":"NP6VGqvXR9Sn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"KJbsV4o_R9Qb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"Gv2KKTwjR9N4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"91zGoLehR9Le"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"collapsed_sections":[],"name":"cnn_images_vs","provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1658829427107}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"gpuClass":"standard"},"nbformat":4,"nbformat_minor":0}